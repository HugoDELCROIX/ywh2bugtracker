image: python:3.9

variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  POETRY_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/poetry"
  PYENV_ROOT: "${CI_PROJECT_DIR}/.cache/pyenv"
  TOX_WORK_DIR: "${CI_PROJECT_DIR}/.cache/tox"
  DOCKER_VERSION: "18.09"
  CONTAINER_BASE: "${CI_REGISTRY}/${CI_PROJECT_PATH}"
  DOCKER_HUB_BASE_TAG: "yeswehack/ywh2bugtracker"

cache:
  key: global
  paths:
    - .cache/pip
    - .cache/poetry
    - .cache/pyenv
    - .cache/tox

stages:
  - verify
  - version
  - build
  - publish

.base_poetry:
  before_script:
    - pip install poetry
    - poetry install --no-root

.base_docker:
  image: "docker:${DOCKER_VERSION}"
  services:
    - name: "docker:${DOCKER_VERSION}-dind"
      alias: docker
  before_script:
    - echo "${CI_JOB_TOKEN}" | docker login -u gitlab-ci-token --password-stdin git.clacos.ninja:4567/v2/

Poetry check:
  stage: verify
  extends: .base_poetry
  script:
    - poetry check

Flake8 code style check:
  stage: verify
  extends: .base_poetry
  script:
    - make flake8
  artifacts:
    paths:
      - build/flake8
    expire_in: 1 day

Static type check:
  stage: verify
  extends: .base_poetry
  script:
    - make mypy
  artifacts:
    paths:
      - build/mypy
    expire_in: 1 day

Unit tests:
  stage: verify
  extends: .base_poetry
  script:
    - if [ ! -d "${PYENV_ROOT}" ]; then curl https://pyenv.run | sh; fi
    - export PATH="${PYENV_ROOT}/bin:$PATH"
    - eval "$(pyenv init -)"
    - pyenv update
    - cat .python-version | xargs -n1 pyenv install -s
    - make tox

Bump dev version:
  stage: version
  except:
    - tags
  extends: .base_poetry
  script:
    - export YWH2BT_VERSION="$(poetry version -s)-beta-$(date +%s)"
    - poetry version "${YWH2BT_VERSION}"
    - echo "${YWH2BT_VERSION}" > .ywh2bt-version
  artifacts:
    paths:
      - pyproject.toml
      - .ywh2bt-version

Save tag version:
  stage: version
  only:
    - tags
  extends: .base_poetry
  script:
    - poetry version -s > .ywh2bt-version
  artifacts:
    paths:
      - .ywh2bt-version

Build:
  stage: build
  extends: .base_poetry
  script:
    - make build
  artifacts:
    paths:
      - dist

Build Docker:
  stage: build
  extends: .base_docker
  script:
    - export DOCKER_LOCAL_TAG="${CONTAINER_BASE}:${CI_COMMIT_REF_SLUG}-$(cat .ywh2bt-version)"
    - docker build --tag "${DOCKER_LOCAL_TAG}" .
    - docker push "${DOCKER_LOCAL_TAG}"

Publish Test PyPi:
  stage: publish
  extends: .base_poetry
  when: manual
  except:
    - tags
  script:
    - poetry publish --repository testpypi

Publish PyPi:
  stage: publish
  extends: .base_poetry
  when: manual
  only:
    - tags
  script:
    - poetry publish

Publish Docker Hub Test:
  stage: publish
  extends: .base_docker
  when: manual
  except:
    - tags
  script:
    - export DOCKER_LOCAL_TAG="${CONTAINER_BASE}:${CI_COMMIT_REF_SLUG}-$(cat .ywh2bt-version)"
    - export DOCKER_HUB_TAG="${DOCKER_HUB_BASE_TAG}:${CI_COMMIT_REF_SLUG}-$(cat .ywh2bt-version)"
    - docker pull "${DOCKER_LOCAL_TAG}"
    - echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_LOGIN}" --password-stdin
    - docker tag "${DOCKER_LOCAL_TAG}" "${DOCKER_HUB_TAG}"
    - docker push "${DOCKER_HUB_TAG}"

Publish Docker Hub:
  stage: publish
  extends: .base_docker
  when: manual
  only:
    - tags
  script:
    - export DOCKER_LOCAL_TAG="${CONTAINER_BASE}:$(cat .ywh2bt-version)"
    - export DOCKER_HUB_TAG="${DOCKER_HUB_BASE_TAG}:$(cat .ywh2bt-version)"
    - export DOCKER_HUB_TAG_LATEST="${DOCKER_HUB_BASE_TAG}:latest"
    - docker pull "${DOCKER_LOCAL_TAG}"
    - echo "${DOCKER_HUB_PASSWORD}" | docker login -u "${DOCKER_HUB_LOGIN}" --password-stdin
    - docker tag "${DOCKER_LOCAL_TAG}" "${DOCKER_HUB_TAG}"
    - docker push "${DOCKER_HUB_TAG}"
    - docker tag "${DOCKER_LOCAL_TAG}" "${DOCKER_HUB_TAG_LATEST}"
    - docker push "${DOCKER_HUB_TAG_LATEST}"
